#! /usr/bin/env python3

from metaCNV import call_CNVs
from metaCNV._preprocess import entropy, metaCNV_data
from metaCNV._gc_skew import main as gc_skew
from metaCNV._gc_skew import get_ori_distance
from metaCNV._mutation_rate_estimation import get_mutation_rate
import argparse
import sys
import os

def get_parser():

    def file_exists(filename):
        if not os.path.exists(filename):
            raise argparse.ArgumentTypeError(f"File {filename} does not exist")
        return filename

    parser = argparse.ArgumentParser()
    subparsers = parser.add_subparsers(dest = 'command', metavar='[command]')

    entropy_parser = subparsers.add_parser('pileup-entropy')
    entropy_parser.add_argument('pileup', type = argparse.FileType('r'))
    entropy_parser.add_argument('--output', '-o', type = argparse.FileType('w'), default = sys.stdout)
    entropy_parser.set_defaults(func = entropy)


    process_parser = subparsers.add_parser('extract-features',
                                           help = 'Extract features for CNV calling from a bam file.')
    process_parser.add_argument('bamfile', type = file_exists)
    process_parser.add_argument('--reference','-ref', type = file_exists, required=True,
                                help = 'Reference fasta file. May contain many species.')
    process_parser.add_argument('--ori-distances', '-ori', type = file_exists, required=True,
                                help = 'File containing distances from origin of replication for each contig.\n'
                                        'Format: bedgraph file with columns: contig_name, start, end, distance_from_origin\n'
                                        'Where distance from origin is between 0 and 1, with 0 being the origin and 1 being the terminus.') 
    process_parser.add_argument('--output', '-o', type = str, required=True,
                                help = 'Output file path.')
    process_parser.add_argument('--window-size','-w', type = int, default = 200,
                                help = 'Window size in base pairs')
    process_parser.add_argument('--min-quality', '-Q', type = int, default = 255,
                                help = 'Minimum read alignment quality to consider.')
    process_parser.set_defaults(func = metaCNV_data)


    gc_skew_parser = subparsers.add_parser('gc-skew',
                                           help = 'Calculate GC skew from a fasta file.')
    gc_skew_parser.add_argument('reference', type = file_exists,
                                help = 'Reference fasta file.')
    gc_skew_parser.add_argument('--output', '-o', type = str, required=True,
                                help = 'Output file path for GC skew bedgraph file.\n'
                                       'Visualize with a genome browser to confirm that GC skew follows the\n'
                                       'typical pattern and that the assembly is probably correct.\n'
                                       'Provide this file to the ori-distance command to calculate distance from origin of replication.')
    gc_skew_parser.set_defaults(func = gc_skew)

    ori_distance_parser = subparsers.add_parser('ori-distance',
                                                help = 'For a whole genome, calculate distance from origin of replication from a GC skew file.')
    ori_distance_parser.add_argument('gc_skew_file', type = file_exists,
                                     help = 'GC skew file generated by the gc-skew command.')
    ori_distance_parser.add_argument('--contig', '-c', type = str, required=True,
                                     help = 'Contig name for which to calculate distance from origin of replication.\n'
                                            'Only one contig name can be specified, as this command is intended to be used with whole genomes')
    ori_distance_parser.add_argument('--reference','-ref', type = file_exists, required=True,
                                     help = 'Reference fasta file. May contain many species.')
    ori_distance_parser.add_argument('--window-size','-w', type = int, default = 200,
                                     help = 'Window size in base pairs')
    ori_distance_parser.add_argument('--output', '-o', type = argparse.FileType('w'), default = sys.stdout,
                                     help = 'Output file path for distance from origin of replication bedgraph file.')
    ori_distance_parser.set_defaults(func = get_ori_distance)


    mut_parser = subparsers.add_parser('mutation-rate',
                                        help = 'Calculate mutation rate from a collection of *ALIGNED* fasta files.')
    mut_parser.add_argument('fastas', type = file_exists, nargs = '+',
                            help = 'Aligned fasta files, e.g. from a multiple sequence alignment,\n'
                                   'or from conesensus sequences from alignment to a reference.\n'
                                   'Multiple files must be provided.'
                            )
    mut_parser.add_argument('--output', '-o', type = argparse.FileType('w'), default = sys.stdout,
                            help = 'Output file path for mutation rate bedgraph file.')
    mut_parser.add_argument('--window-size','-w', type = int, default = 200,
                            help = 'Window size in base pairs, MUST match the window size used for the ori-distance command.')
    mut_parser.add_argument('--n-jobs', '-j', type = int, default = 1)
    mut_parser.add_argument('--region', '-r', type = str, default = None,
                            help = 'Region to calculate mutation rate for, e.g. "NC_000913.3:1-1000000".\n'
                                   'If not provided, the mutation rate will be calculated for the entire fasta.')
    mut_parser.set_defaults(func = get_mutation_rate)


    cnv_parser = subparsers.add_parser('call', help = 'Call CNVs from a metaCNV file.')
    req = cnv_parser.add_argument_group('Required arguments')
    req.add_argument('metaCNV_file', type = file_exists,
                     help = 'metaCNV file generated by the extract-features command.')
    req.add_argument('--mutation-rates', '-mut', type = file_exists, required=True,
                     help = 'Mutation rate bedgraph file generated by the mutation-rate command.')
    req.add_argument('--outprefix', '-o', type = str, required=True,
                     help = 'Output prefix for CNV bedgraph files.')
    req.add_argument('--contigs', '-c', type = str, nargs = '+', required=True,
                     help = 'Contigs for which to call CNVs. Must be present in the metaCNV file.\n'
                            'The "call" command assumes that all contigs specified are from the same species,\n'
                            'and so will have the same baseline abundance.\n'
                            'To call for multiple species, run the "call" command separately for each species.')

    tmat_group = cnv_parser.add_argument_group('Transition matrix arguments')
    tmat = tmat_group.add_mutually_exclusive_group()
    tmat.add_argument('--transition-matrix', '-tm', type = file_exists,
                      help = 'Transition matrix tsv file with ploidies as column names.')
    tmat.add_argument('--alpha', '-a', type = float, default = 1e6, 
                      help = 'Regularization parameter for basic sparse transition matrix.\nHigher --> fewer ploidy transitions.')

    model_params = cnv_parser.add_argument_group('Model parameters')
    model_params.add_argument('--max-fdr', '-fdr', type = float, default = 0.05,
                              help = 'Maximum false discovery rate for CNV calls.')
    model_params.add_argument('--coverage-weight', '-cw', type = float, default = 0.8,
                              help = 'Weight for coverage evidence in the likelihood model (relative to entropy evidence).')
    model_params.add_argument('--entropy-df', '-df', type = int, default = 20,
                              help = 'Degrees of freedom for entropy distribution.')
    model_params.add_argument('--max-strains', '-ms', type = int, default = 3,
                              help = 'Maximum number of strains to consider for CNV calls.')

    data_params = cnv_parser.add_argument_group('Data loading parameters')
    data_params.add_argument('--strand-bias-tol', '-sb', type = float, default = 0.1,
                             help = 'Maximum strand bias tolerated for a position to be considered for CNV calling.\n'
                                    'Bins at the edges of CNVs may have a read strand bias which influences base calling accuracy\n'
                                    'and makes coverage appear to interpolate between ploidies.\n'
                                    'If a bin is found to have a forward strand proportion greater than 0.5+sb or less than 0.5-sb,\n'
                                    'it will be excluded from CNV calling.\n'
                                    'This is calculated using a beta-binomial hypothesis test that accounts for read depth\n'
                                    'in deciding whether a position is strand biased.'
                            )
    data_params.add_argument('--min-entropy-positions', '-ep', type = float, default = 0.9,
                             help = 'Minimum proportion of positions in a window that are covered by reads\n'
                                    'to be considered for CNV calling using entropy.')
    cnv_parser.set_defaults(func = call_CNVs)

    return parser


def main():

    parser = get_parser()
    args = parser.parse_args()

    try:
        args.func
    except AttributeError:
        parser.print_help()
        sys.exit(1)

    del args.command
    func = args.func; del args.func

    func(**vars(args))


if __name__ == '__main__':
    main()